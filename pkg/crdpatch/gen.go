package crdpatch

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/format"
	"io"
	"sort"
	"strings"

	"sigs.k8s.io/controller-tools/pkg/deepcopy"
	"sigs.k8s.io/controller-tools/pkg/genall"
	"sigs.k8s.io/controller-tools/pkg/loader"
	"sigs.k8s.io/controller-tools/pkg/markers"
)

var (
	patchObjectMarker          = markers.Must(markers.MakeDefinition("kubebuilder:crdpatch:object", markers.DescribesType, ""))
	patchSubresourcePathMarker = markers.Must(markers.MakeDefinition("kubebuilder:crdpatch:path", markers.DescribesType, ""))
)

// +controllertools:marker:generateHelp

// Generator generates code containing Type, Data, and
// Change method implementations.
type Generator struct {
	// HeaderFile specifies the header text (e.g. license) to prepend to generated files.
	HeaderFile string `marker:",optional"`
	// Year specifies the year to substitute for " YEAR" in the header file.
	Year string `marker:",optional"`
}

func (Generator) RegisterMarkers(into *markers.Registry) error {
	if err := markers.RegisterAll(into, patchObjectMarker, patchSubresourcePathMarker); err != nil {
		return err
	}
	into.AddHelp(
		patchObjectMarker, markers.SimpleHelp("object", "object to make patch for"))
	into.AddHelp(
		patchSubresourcePathMarker, markers.SimpleHelp("path", "subresource path from `object`"))
	return nil
}

// PatchGenCtx contains the common info for generating Patch implementations.
type PatchGenCtx struct {
	Collector  *markers.Collector
	Checker    *loader.TypeChecker
	HeaderText string
}

// GenerateForPackage generates Patch implementations for
// types in the given package, writing the formatted result to given writer.
// May return nil if source could not be generated.
func (ctx *PatchGenCtx) GenerateForPackage(root *loader.Package) []byte {
	ctx.Checker.Check(root, func(node ast.Node) bool {
		// ignore interfaces
		_, isIface := node.(*ast.InterfaceType)
		return !isIface
	})

	root.NeedTypesInfo()

	byType := make(map[string][]byte)
	importsList := deepcopy.NewImportsList(root)
	if err := markers.EachType(ctx.Collector, root, func(info *markers.TypeInfo) {
		outContent := new(bytes.Buffer)

		// return if not enabled on type
		if !enabledOnType(info) {
			return
		}

		var path string
		if p := info.Markers.Get(patchSubresourcePathMarker.Name); p != nil {
			path = p.(string)
		}
		patchCtx := &patchMaker{
			pkg:         root,
			object:      info.Markers.Get(patchObjectMarker.Name).(string),
			path:        path,
			ImportsList: importsList,
			CodeWriter:  deepcopy.NewCodeWriter(outContent),
		}

		patchCtx.GeneratePatchTypeFor(root, info)
		patchCtx.GeneratePatchImplementationFor(root, info)
		patchCtx.GenerateChangeMethodsFor(root, info)
		patchCtx.GenerateMethodsFor(root, info)

		outBytes := outContent.Bytes()
		if len(outBytes) > 0 {
			byType[info.Name] = outBytes
		}
	}); err != nil {
		root.AddError(err)
		return nil
	}

	if len(byType) == 0 {
		return nil
	}

	outContent := new(bytes.Buffer)
	writeHeader(root, outContent, root.Name, importsList, ctx.HeaderText)
	writeMethods(root, outContent, byType)

	outBytes := outContent.Bytes()
	formattedBytes, err := format.Source(outBytes)
	if err != nil {
		root.AddError(err)
		// we still write the invalid source to disk to figure out what went wrong
	} else {
		outBytes = formattedBytes
	}

	return outBytes
}

func enabledOnType(info *markers.TypeInfo) bool {
	obj, ok := info.Markers.Get(patchObjectMarker.Name).(string)
	if ok {
		return obj != ""
	}
	return false
}

func (d Generator) Generate(ctx *genall.GenerationContext) error {
	var headerText string

	if d.HeaderFile != "" {
		headerBytes, err := ctx.ReadFile(d.HeaderFile)
		if err != nil {
			return err
		}
		headerText = string(headerBytes)
	}
	headerText = strings.ReplaceAll(headerText, " YEAR", " "+d.Year)

	patchGenCtx := PatchGenCtx{
		Collector:  ctx.Collector,
		Checker:    ctx.Checker,
		HeaderText: headerText,
	}

	for _, root := range ctx.Roots {
		outContents := patchGenCtx.GenerateForPackage(root)
		if outContents == nil {
			continue
		}

		writeOut(ctx, root, outContents)
	}

	return nil
}

// writeHeader writes out the build tag, package declaration, and imports
func writeHeader(pkg *loader.Package, out io.Writer, packageName string, imports *deepcopy.ImportsList, headerText string) {
	// NB(directxman12): blank line after build tags to distinguish them from comments
	_, err := fmt.Fprintf(out, `// +build !ignore_autogenerated

%[3]s

// Code generated by controller-gen. DO NOT EDIT.

package %[1]s

import (
%[2]s
)

`, packageName, strings.Join(imports.ImportSpecs(), "\n"), headerText)
	if err != nil {
		pkg.AddError(err)
	}

}

// writeMethods writes each method to the file, sorted by type name.
func writeMethods(pkg *loader.Package, out io.Writer, byType map[string][]byte) {
	sortedNames := make([]string, 0, len(byType))
	for name := range byType {
		sortedNames = append(sortedNames, name)
	}
	sort.Strings(sortedNames)

	for _, name := range sortedNames {
		_, err := out.Write(byType[name])
		if err != nil {
			pkg.AddError(err)
		}
	}
}

// writeOut outputs the given code, after gofmt-ing it.  If we couldn't gofmt,
// we write the unformatted code for debugging purposes.
func writeOut(ctx *genall.GenerationContext, root *loader.Package, outBytes []byte) {
	outputFile, err := ctx.Open(root, "zz_generated.patch.go")
	if err != nil {
		root.AddError(err)
		return
	}
	defer outputFile.Close()
	n, err := outputFile.Write(outBytes)
	if err != nil {
		root.AddError(err)
		return
	}
	if n < len(outBytes) {
		root.AddError(io.ErrShortWrite)
	}
}
